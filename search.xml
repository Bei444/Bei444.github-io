<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>网站更新日志</title>
      <link href="/2023/03/26/%E7%BD%91%E7%AB%99%E6%9B%B4%E6%96%B0%E6%97%A5%E5%BF%97/"/>
      <url>/2023/03/26/%E7%BD%91%E7%AB%99%E6%9B%B4%E6%96%B0%E6%97%A5%E5%BF%97/</url>
      
        <content type="html"><![CDATA[<!-- 设置背景样式 --><style>#web_bg{  background: url(https://picbed-2th.pages.dev/img/dm_cover5.webp)!important;  /*重新定义background会导致原有定位属性失效，所以也需要再声明一次加权的定位属性*/  background-position: center !important;  background-size: cover !important;  background-repeat: no-repeat !important;}</style><!-- ----------- --><div class="timeline blue"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>更新日志</p></div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2023-03-26</p></div></div><div class='timeline-item-content'><pre><code>1.添加了每篇文章单独图片与背景样式2.添加了直达底部按钮3.添加了fps显示</code></pre></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2023-03-27</p></div></div><div class='timeline-item-content'><pre><code>1.添加了信息卡片头像状态2.添加了信息卡片背景图3.添加了头像呼吸灯4.添加右键菜单5.更改了夜间模式切换动画</code></pre></div></div></div>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>MC专区</title>
      <link href="/2023/03/24/MC%E4%B8%93%E5%8C%BA/"/>
      <url>/2023/03/24/MC%E4%B8%93%E5%8C%BA/</url>
      
        <content type="html"><![CDATA[<!-- 设置背景样式 --><style>#web_bg{  background: url(https://picbed-2th.pages.dev/img/dm9.webp)!important;  /*重新定义background会导致原有定位属性失效，所以也需要再声明一次加权的定位属性*/  background-position: center !important;  background-size: cover !important;  background-repeat: no-repeat !important;}</style><!-- ----------- --><h1 id="冬季救援"><a href="#冬季救援" class="headerlink" title="冬季救援"></a>冬季救援</h1><details class="folding-tag" cyan open><summary> 工程指导手册 </summary>              <div class='content'>              <p>点击前往:<a href="https://www.mcmod.cn/post/2476.html">https://www.mcmod.cn/post/2476.html</a></p>              </div>            </details>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>学习笔记</title>
      <link href="/2023/03/20/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/03/20/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<!-- 设置背景样式 --><style>#web_bg{  background: url(https://picbed-2th.pages.dev/img/dm5.webp)!important;  /*重新定义background会导致原有定位属性失效，所以也需要再声明一次加权的定位属性*/  background-position: center !important;  background-size: cover !important;  background-repeat: no-repeat !important;}</style><!-- ----------- --><h1 id="数据库连接池"><a href="#数据库连接池" class="headerlink" title="数据库连接池"></a>数据库连接池</h1><h2 id="什么是数据库连接池："><a href="#什么是数据库连接池：" class="headerlink" title="什么是数据库连接池："></a>什么是数据库连接池：</h2><p> 在 JDBC 编程中,每次创建和断开<strong>Connection 对象</strong>都会消耗一定的时间和 I0 资源。 在 Java 程序与数<br>据库之间建立连接时,数据库端要验证用户名和密码,并且要为这个连接分配资源, Java 程序则要<br>把代表连接的<strong>java.sql.Connection</strong>对象等加载到内存中,所以建立数据库连接的开销很大,尤其是<br>在大量的并发访问时。假如某网站一天的访问量是 10 万 ,那么该网站的服务器就需要创建、断开连<br>接 10 万次,频繁地创建、断开数据库连接会影响数据库的访问效率,甚至导致数据库崩溃。</p><p> 为了避免频繁的创建数据库连接，数据库连接池技术应运而生。数据库连接池负责分配管理和释放数据库连接，它允许应用程序重复使用现有的数据库连接，而不是重新建立简单地说，数据库连接池就是为数据库建立的一个“缓冲池”。预先在“缓冲池”中放入一定数量的连接，当需要建立数据库连接时，只需要从“缓冲池”中取出一个，使用完毕后再放回“缓冲池”即可。</p><p><strong>连接池连接数据库的原理:</strong></p><p><img src="https://cdn.staticaly.com/gh/Bei444/Picbed@main/2023/3/bj7.png" alt="image-20230317162037901"></p><p>数据库连接池在初始化时将创建一定数量的数据库连接放到连接池中,当应用程序访问数<br>据库时并不是直接创建 Connection ,而是向连接池“申请”-个 Connection。如果连接<br>池中有空闲的 Connection ,则返回一个链接给应用程序,否则应用程序需要创建新的<br>Connection。使用完毕后,连接池会将 Connection 回收,重新放入连接池以供其他的线<br>程使用,从而减少创建和断开数据库连接的次数,提高数据库的访问效率。</p><h2 id="DataSource-接口"><a href="#DataSource-接口" class="headerlink" title="DataSource 接口"></a>DataSource 接口</h2><p><strong>DataSource 接口</strong>的方法：</p><p>为了获取数据库连接对象( Connection) , JDBC 提供了<strong>javax.sql.DataSource</strong>接口, j<strong>avax.sql.DataSource</strong>接口<br>负责与数据库建立连接,淀义了返回值为<strong>Connection 对象</strong>的方法,具体如下。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Connection getConnection()</span><br><span class="line">Connection getConnection(String username, String password)</span><br></pre></td></tr></table></figure><p><strong>DataSource 接口</strong>的实现类：</p><p>javax.sql.DataSource 接口的类称为数据源，每创建一个数据库连接，这个数据库连接信息都会存储到数据源中。数据源用于管理数据库连接池。如果数据是水,数据库就是水库,数据库连接池就是连接到水库的管道,终端用户看到的数据集是管道里流出来的水。一些开源组织提供了数据库连接池的独立实现,常用的有 DBCP 数据库连接池和 C3P0 数据库连接池。</p><p><strong>数据库连接池 jar 包下载：<a href="https://cowtransfer.com/s/13b5e1dccf5f4c">https://cowtransfer.com/s/13b5e1dccf5f4c</a></strong></p><h2 id="DBCP-数据库连接池"><a href="#DBCP-数据库连接池" class="headerlink" title="DBCP 数据库连接池"></a>DBCP 数据库连接池</h2><p>DBCP 即数据库连接池( DataBase Connection Pool ) ,是 Apache 组织下的开源连接池<br>实现,也是 Tomcat 服务器使用的连接池组件。使用 DBCP 数据库连接池时,需要在应用<br>程序中导入 commons-dbcp2.jar 和 commons-pool2.jar 两个 JAR 包。</p><p><strong>BasicDataSource 类的常用方法</strong></p><p><img src="https://cdn.staticaly.com/gh/Bei444/Picbed@main/2023/3/bj2.png" alt="image-20230317151249838"></p><p><strong>BasicDataSource</strong>对象的常用方法中：</p><p>setDriverClassName()、setUrl()、 setUsername()、setPassword()等方法：都是设置数据库连接信息的方法。<br>setInitialSize()、 setMinIdle()等方法：都是设置数据库连接池初始化值的方法。<br>getConnection()方法：可以从 DBCP 数据库连接池中获取一个数据库连接。</p><p><strong>代码演示:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public class DBCP_01 &#123;</span><br><span class="line">    public static void main(String[] args) throws SQLException &#123;</span><br><span class="line">        BasicDataSource dataSource = new BasicDataSource();</span><br><span class="line">        dataSource.setDriverClassName(&quot;com.mysql.jdbc.Driver&quot;); //设置数据库的驱动名称</span><br><span class="line">        dataSource.setUrl(&quot;jdbc:mysql://localhost:3306/db_1001? useUnicode=true&amp;characterEncoding=utf8&quot;); //设置数据库路径</span><br><span class="line">        dataSource.setUsername(&quot;root&quot;); //设置数据库的登录账号</span><br><span class="line">        dataSource.setPassword(&quot;12345&quot;); //设置数据库的登录密码</span><br><span class="line">        dataSource.setInitialSize(10); //设置数据库连接池初始化的连接数目</span><br><span class="line">        dataSource.setMinIdle(5);      //设置数据库连接池最小限制连接数目</span><br><span class="line">        Connection connection = dataSource.getConnection();</span><br><span class="line">        System.out.println(connection);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>输出结果:</strong></p><p><img src="https://cdn.staticaly.com/gh/Bei444/Picbed@main/2023/3/bj8.png" alt="image-20230317183850386"></p><p><strong>BasicDataSourceFactory</strong>工厂类</p><p>BasicDataSourceFactory 是创建 BasicDataSource 对象的工厂类,它包含一个返回值为<br>BasicDataSource 类型的方法 createDataSource() ,该方法通过读取配置文件的信息生成<br>数据源对象并返回给调用者。把数据库的连接信息和数据源的初始化信息提取出来写进配<br>置文件,这样让代码看起来更加简洁,思路也更加清晰。</p><p>除了使用 BasicDataSource 直接创建数据源对象外,还可以使用<br>BasicDataSourceFactory 工厂类读取配置文件,创建数据源对象,然后获取数据库连接<br>对象。</p><p><strong>示例</strong>：</p><p>在 src 目录下传建一个 dbcpconfig.properties 文件(该文件用于设置数据库的连接信息和数据源的初始化信息)</p><p><img src="https://cdn.staticaly.com/gh/Bei444/Picbed@main/2023/3/bj9.png" alt="image-20230317184925855"></p><p><strong>代码:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public class DBCPFactory &#123;</span><br><span class="line">    public static void main(String[] args) throws Exception &#123;</span><br><span class="line">        Properties properties = new Properties();</span><br><span class="line">        File file = new File(&quot;src/dbcpconfig.properties&quot;);</span><br><span class="line">        FileInputStream in = new FileInputStream(file);</span><br><span class="line">        properties.load(in);</span><br><span class="line">        BasicDataSource dataSource = (BasicDataSource)</span><br><span class="line">                BasicDataSourceFactory.createDataSource(properties);</span><br><span class="line">        Connection connection = dataSource.getConnection();</span><br><span class="line">        System.out.println(connection);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>输出结果：</strong></p><p><img src="https://cdn.staticaly.com/gh/Bei444/Picbed@main/2023/3/bj10.png" alt="image-20230317185542279"></p><h2 id="C3P0-数据库连接池"><a href="#C3P0-数据库连接池" class="headerlink" title="C3P0 数据库连接池"></a>C3P0 数据库连接池</h2><p>C3PO 是目前最流行的开源数据库连接池之一，它实现了 DataSource 数据源接口，支持 JDBC2 和 JDBC3 的标准规范，易于扩展并且性能优越，著名的开源框架 Hibernate 和 Spring 都支持该数据库连接池。在使用 C3PO 数据库连接池开发时，需要了解 C3PO 中 DataSource 接口的实现类 ComboPooledDataSource，它是 C3P0 的核心类，提供了数据源对象的相关方法。</p><p><strong>ComboPooledDataSource 类的常用方法</strong></p><p><img src="https://cdn.staticaly.com/gh/Bei444/Picbed@main/2023/3/bj1.png" alt="image-20230317141908274"></p><p>使用 C3P0 数据库连接池是,首先通过调用<strong>ComboPooledDataSource 类</strong>中的两个构造方法**ComboPooledDataSource()<strong>或</strong>ComboPooledDataSource(String cibfigName)**来创建数据源对象</p><p>调用**ComboPooledDataSource()**构造方法创建数据源对象,需要手动给数据源对象设置<br>属性值,然后获取数据库连接对象。</p><p><strong>代码演示:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public class C3P0 &#123;</span><br><span class="line">    public static void main(String[] args) throws SQLException, PropertyVetoException &#123;</span><br><span class="line">        ComboPooledDataSource dataSource = new ComboPooledDataSource();</span><br><span class="line">        dataSource.setDriverClass(&quot;com.mysql.cj.jdbc.Driver&quot;);</span><br><span class="line">        dataSource.setJdbcUrl(&quot;jdbc:mysql://localhost:3306/db_1001?useUnicode=true&amp;characterEncoding=utf8&quot;);</span><br><span class="line">        dataSource.setUser(&quot;root&quot;);</span><br><span class="line">        dataSource.setPassword(&quot;12345&quot;);</span><br><span class="line">        dataSource.setMaxPoolSize(20);</span><br><span class="line">        dataSource.setInitialPoolSize(10);</span><br><span class="line">        System.out.println(dataSource.getConnection());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>输出结果:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">com.mchange.v2.c3p0.impl.NewProxyConnection@7995092a</span><br></pre></td></tr></table></figure><p>调用**ComboPooledDataSource(String configName)**构造方法可以读取 c3p0-<br>config.xml 配置文件,根据配置文件中的配置信息创建数据源对象,然后获取数据库<br>连接对象。</p><p><strong>示例:</strong></p><p>首先在项目的 src 根目录下床架拿一个 c3p0-config.xml 文件，用于设置数据库的连接信息和数据源的初始化信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;c3p0-config&gt;</span><br><span class="line">&lt;named-config name=&quot;hgkj&quot;&gt;</span><br><span class="line">&lt;property name=&quot;driverClass&quot;&gt;com.mysql.cj.jdbc.Driver&lt;/property&gt;</span><br><span class="line">&lt;property name=&quot;jdbcUrl&quot;&gt;</span><br><span class="line">           jdbc:mysql://localhost:3306/db_1001</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">&lt;property name=&quot;user&quot;&gt;root&lt;/property&gt;</span><br><span class="line">&lt;property name=&quot;password&quot;&gt;12345&lt;/property&gt;</span><br><span class="line">&lt;property name=&quot;initialPoolSize&quot;&gt;5&lt;/property&gt;</span><br><span class="line">&lt;property name=&quot;maxPoolSize&quot;&gt;15&lt;/property&gt;</span><br><span class="line">&lt;/named-config&gt;</span><br><span class="line">&lt;/c3p0-config&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>代码演示:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public class C3P0_p &#123;</span><br><span class="line">    public static void main(String[] args) throws SQLException &#123;</span><br><span class="line">        ComboPooledDataSource dataSource = new ComboPooledDataSource(&quot;hgkj&quot;);</span><br><span class="line">        System.out.println(dataSource.getConnection());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>结果输出：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">com.mchange.v2.c3p0.impl.NewProxyConnection@70be0a2b</span><br></pre></td></tr></table></figure><p><strong>需要注意的是</strong>,在使用<strong>ComboPooledDataSource(String configName)<strong>方法创建数据源<br>对象时必须遵循以下两点:<br>(1 )配置文件名称必须为</strong>c3p0-config.xml</strong>或者<strong>c3p0.properties</strong> ,并且位于该项目的<strong>src</strong><br>根目录下。<br>(2 )当传入的<strong>configName</strong>值为空或者不存在时,使用默认配置信息创建数据源。</p><h1 id="DBUtils-工具"><a href="#DBUtils-工具" class="headerlink" title="DBUtils 工具"></a>DBUtils 工具</h1><p><strong>DBUtils 工具的作用：</strong></p><p>· 为了更加简单地使用 JDBC , Apache 组织提供了一个<strong>DBUtils</strong>工具 ,它是操作数据库的一<br>个组件,实现了对<strong>JDBC</strong>的简单封装,可以在不影响数据库访问性能的情况下简化<strong>JDBC</strong>的<br>编码工作量。<strong>DBUtils</strong>工具 要有三个作用。<br>● 写数据，<strong>DBUtils</strong>可以通过编写 SQL 语句对数据表进行增、删、改操作。<br>● 读数据, <strong>DBUtils</strong>工具可以将从数据表中读取的数据结果集转换成 Java 常用类集合,以<br>方便对结果进行处理。<br>● 优化性能,在使用<strong>DBUtils</strong>工具的基础上,程序可以使用数据源、JNDI、数据库连接池<br>等技术减少代码冗余。</p><p><strong>DBUtils 的核心类库的三个核心 API：</strong></p><p><img src="https://cdn.staticaly.com/gh/Bei444/Picbed@main/2023/3/bj11.png" alt="image-20230317200055184"></p><p><strong>DBUtils</strong>核心类库主要包括<strong>DBUtils</strong>类、<strong>QueryRunner</strong>类和<strong>ResultSetHandler</strong>接口。<br><strong>DBUtils.<strong>工具主要通过这三个核心 API 进行</strong>JDBC</strong>的所有操作。</p><h2 id="DBUtils-类"><a href="#DBUtils-类" class="headerlink" title="DBUtils 类"></a>DBUtils 类</h2><p><strong>DBUtils 工具的作用</strong>：</p><p><strong>DBUtils</strong>类主要提供了加载 JDBC 驱动、关闭资源等方法, <strong>DBUtils</strong>类中的方法一般为静态方<br>法,可以直接使用类名进行调用。</p><p><strong>DBUtils 类的常用方法</strong></p><p><img src="https://cdn.staticaly.com/gh/Bei444/Picbed@main/2023/3/bj6.png" alt="image-20230317152800199"></p><h2 id="QueryRunner-类"><a href="#QueryRunner-类" class="headerlink" title="QueryRunner 类"></a>QueryRunner 类</h2><p> <strong>QueryRunner</strong>类简化了执行 SQL 语句的代码,它与<strong>ResultSetHandler</strong>配合就能完成大部<br>分的数据库操作,大大减少了编码量。<strong>QueryRunner</strong>类提供了带有一 个参数的构造方法,<br>该方法以<strong>javax.sql.DataSource</strong>的实例对象作为参数传递到<strong>QueryRunner</strong>的构造方法中来<br>获取<strong>Connection</strong>对象。 针对不同的数据库操作, <strong>QueryRunner</strong>类提供不同的方法。</p><p><strong>QueryRunner 类的常用方法</strong></p><p><img src="https://cdn.staticaly.com/gh/Bei444/Picbed@main/2023/3/bj3.png" alt="image-20230317151852874"></p><h2 id="ResultSetHandler-接口"><a href="#ResultSetHandler-接口" class="headerlink" title="ResultSetHandler 接口"></a>ResultSetHandler 接口</h2><p> <strong>ResultSetHandler</strong>接口还提供了一个单独的方法<strong>handle (java.sql.ResultSet rs)<strong>，如果上述实现类没有提供想要的功能，可以自定义一个实现</strong>ResultSetHandler</strong>接口的类，然后通过重写<strong>handle0</strong>方法，实现结果集的处理。</p><p><strong>ResultSetHandler 接口中的常见实现类</strong></p><p><img src="https://cdn.staticaly.com/gh/Bei444/Picbed@main/2023/3/bj4.png" alt="image-20230317152031487"></p><h2 id="ResultSetHandler-实现类"><a href="#ResultSetHandler-实现类" class="headerlink" title="ResultSetHandler 实现类"></a>ResultSetHandler 实现类</h2><p><strong>ResultSetHandler</strong>接口中的 4 个实现类:BeanHandler、BeanListHandler、ColumnListHandler、ScalarHandler</p><p><strong>BeanHandler</strong>和<strong>BeanListHandler</strong>实现类是将结果集中的数据封装到对应的 JavaBean 中。在封装时,<br>表中数据的字段和 JavaBean 的属性是相互对应的,一条数据记录被封装进一 个对应的 JavaBean 对象<br>中。BeanHandler 和 Beanl istHandler 的对比如下表所示。</p><p><img src="https://cdn.staticaly.com/gh/Bei444/Picbed@main/2023/3/bj5.png" alt="image-20230317152302234"></p><p><strong>ColumnListHandler 和 ScalarHandler</strong>类可以对指定的列数据进行封装,在封装时,查询指定列数据,<br>然后将获得的列数据封装到容器中。ColumnListHandler 和 ScalarHandler 的对比如 下表所示。</p><p><img src="https://cdn.staticaly.com/gh/Bei444/Picbed@main/2023/3/bj12.png" alt="image-20230317222506941"></p><p><strong>代码演示:</strong></p><p><strong>ColumnListHandler:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public class ResultSetTest3 &#123;</span><br><span class="line">public static void testScalarHandler() throws sQLException &#123;</span><br><span class="line">ComboPooledDataSource dataSource = new ComboPooledDataSource(&quot;hgkj&quot;);</span><br><span class="line">        QueryRunner queryRunner =new QueryRunner(dataSource);</span><br><span class="line">        List&lt;String&gt; objs=(ArrayList) queryRunner.query(&quot;select * from good&quot;,</span><br><span class="line">                new ColumnListHandler&lt;&gt;(&quot;goodName&quot;));</span><br><span class="line">        System.out.println(objs);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>输出结果:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[浦江多汁红提, 橙子, 桃子, 葡萄</span><br></pre></td></tr></table></figure><p><strong>SclarHandler:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public class ResultSetTest4 &#123;</span><br><span class="line">public static void testScalarHandler() throws sQLException &#123;</span><br><span class="line">ComboPooledDataSource dataSource = new ComboPooledDataSource(&quot;hgkj&quot;);</span><br><span class="line">        QueryRunner queryRunner =new QueryRunner(dataSource);</span><br><span class="line">        long count = queryRunner.query(&quot;select count(*) from good&quot;,new ScalarHandler&lt;&gt;());</span><br><span class="line">        System.out.println(&quot;商品的总数:&quot;+count);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>输出结果：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">商品的总数:4</span><br></pre></td></tr></table></figure><h2 id="DButils-实现增删改"><a href="#DButils-实现增删改" class="headerlink" title="DButils 实现增删改:"></a>DButils 实现增删改:</h2><p><strong>增:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) throws SQLException &#123;</span><br><span class="line">    ComboPooledDataSource dataSource = new ComboPooledDataSource(&quot;hgkj&quot;);</span><br><span class="line">    QueryRunner queryRunner =new QueryRunner(dataSource);</span><br><span class="line">    String sql=&quot;insert into good(goodName,goodDes,goodPrice) values(?,?,?)&quot;;</span><br><span class="line">    int row=queryRunner.update(sql,&quot;哈密瓜&quot;,&quot;大棚作物&quot;,7);</span><br><span class="line">    System.out.println(row);</span><br></pre></td></tr></table></figure><p><strong>输出结果：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1</span><br></pre></td></tr></table></figure><h1 id="JQuery中的ajax："><a href="#JQuery中的ajax：" class="headerlink" title="JQuery中的ajax："></a>JQuery中的ajax：</h1><p>1.添加jquery的库文件</p><p>2.添加json转换的jar包(jackson是springMVC中的jar包,也可以是json包)<br>3.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">        type: &quot;POST&quot;,//请求的提交方式</span><br><span class="line">        dataType: &quot;json&quot;,//提交和返回的数据格式</span><br><span class="line">        url: &quot;ajaxServlet&quot;,//请求的路径</span><br><span class="line">        data: &#123;&quot;goodName&quot;:goodNames&#125;,//提交的数据</span><br><span class="line">        success: function (data) &#123;//成功的回调函数，data是响应的数据&#125;,</span><br><span class="line">        error: function (XMLHttpRequest, textStatus, errorThrown) &#123;//失败的回调函数&#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>博客魔改备忘录</title>
      <link href="/2023/03/20/Hexo/"/>
      <url>/2023/03/20/Hexo/</url>
      
        <content type="html"><![CDATA[<!-- 设置背景样式 --><style>#web_bg{  background: url(https://picbed-2th.pages.dev/img/dm7.webp)!important;  /*重新定义background会导致原有定位属性失效，所以也需要再声明一次加权的定位属性*/  background-position: center !important;  background-size: cover !important;  background-repeat: no-repeat !important;}</style><!-- ----------- --><h1 id="图床"><a href="#图床" class="headerlink" title="图床"></a>图床</h1><h2 id="本地部署到-github"><a href="#本地部署到-github" class="headerlink" title="本地部署到 github:"></a>本地部署到 github:</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean   //清理缓存</span><br><span class="line">hexo generate //生成静态资源</span><br><span class="line">hexo deploy  //部署</span><br></pre></td></tr></table></figure><h2 id="上传-github-代码"><a href="#上传-github-代码" class="headerlink" title="上传 github 代码:"></a>上传 github 代码:</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将更改提交</span></span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&quot;更新图片&quot;</span></span><br><span class="line"><span class="comment"># 推送至github仓库</span></span><br><span class="line">git push</span><br></pre></td></tr></table></figure><h2 id=""><a href="#" class="headerlink" title=""></a></h2><h2 id="引用图床图片示例"><a href="#引用图床图片示例" class="headerlink" title="引用图床图片示例:"></a>引用图床图片示例:</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://picbed-2th.pages.dev/img/p20.png</span><br></pre></td></tr></table></figure><div class="reference-source"><span class="hidden-anchor" id="referfrom_[1] "></span><a class="reference-anchor" href="#referto_[1] ">[1] <div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href=" https://www.fomal.cc/posts/2013454d.html"> MARKDOWN语法与外挂标签写法汇总 </a></div>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
